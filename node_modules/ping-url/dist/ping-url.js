
/*!
* ping-url.js v1.0.3
* (c) 2019-2019 leon
* Released under the MIT License.
*/

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.Ping = factory());
}(this, function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function getLoadTime(url) {
        return new Promise(function (resolve) {
            var img = document.createElement('img');
            img.style.display = "none";
            img.src = url + "/?v=" + Math.random();
            var timeStart = new Date();
            img.onerror = function () {
                var timeEnd = new Date();
                resolve(timeEnd.getTime() - timeStart.getTime());
            };
            img.onload = function () {
                var timeEnd = new Date();
                resolve(timeEnd.getTime() - timeStart.getTime());
            };
            document.body.appendChild(img);
        });
    }
    function getStatus(url) {
        return new Promise(function (resolve, reject) {
            var link = document.createElement('link');
            link.rel = "stylesheet";
            link.type = "text/css";
            link.href = url;
            link.onload = function () {
                resolve(true);
            };
            link.onerror = function () {
                resolve(false);
            };
            document.body.appendChild(link);
        });
    }

    var strRegex = "^((https|http)://)?" + "(([0-9a-z]+\\.)*" + "([0-9a-z][0-9a-z-]{0,20})?[0-9a-z]\\." + "[a-z]{2,6})" + "(:[0-9]{1,4})?" + "((/?)|" + "(/[0-9a-z_!~*().;?:@&=+$,%#-]+)+/?)$";
    function isUrl(strUrl) {
        var re = new RegExp(strRegex, "g");
        if (re.test(strUrl)) {
            return true;
        }
        return false;
    }

    var protocol = 'http';
    var protocolList = ['http', 'https'];
    function config(_a) {
        var prot = _a.protocol;
        if (!protocolList.includes(prot)) {
            throw new Error("protocolList not includes " + prot);
        }
        protocol = prot;
        return protocol;
    }
    function check(url) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var result, status, time;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isUrl(url)) {
                            reject({
                                status: false,
                                msg: "url is not correct!"
                            });
                            return [2];
                        }
                        if (!url.includes('http://') && !url.includes('https://')) {
                            url = protocol + "://" + url;
                        }
                        result = {
                            status: false,
                            time: -1
                        };
                        return [4, getStatus(url)];
                    case 1:
                        status = _a.sent();
                        return [4, getLoadTime(url)];
                    case 2:
                        time = _a.sent();
                        result.status = status;
                        result.time = time;
                        resolve(result);
                        return [2];
                }
            });
        }); });
    }
    var main = {
        check: function (url) { return check(url); },
        config: function (option) { return config(option); }
    };

    return main;

}));
//# sourceMappingURL=ping-url.js.map
