import * as tslib_1 from "tslib";
import { getLoadTime, getStatus, } from './utils/check';
import { isUrl } from './utils/is';
var protocol = 'http';
var protocolList = ['http', 'https'];
function config(_a) {
    var prot = _a.protocol;
    if (!protocolList.includes(prot)) {
        throw new Error("protocolList not includes " + prot);
    }
    protocol = prot;
    return protocol;
}
function check(url) {
    var _this = this;
    return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var result, status, time;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isUrl(url)) {
                        reject({
                            status: false,
                            msg: "url is not correct!"
                        });
                        return [2];
                    }
                    if (!url.includes('http://') && !url.includes('https://')) {
                        url = protocol + "://" + url;
                    }
                    result = {
                        status: false,
                        time: -1
                    };
                    return [4, getStatus(url)];
                case 1:
                    status = _a.sent();
                    return [4, getLoadTime(url)];
                case 2:
                    time = _a.sent();
                    result.status = status;
                    result.time = time;
                    resolve(result);
                    return [2];
            }
        });
    }); });
}
export default {
    check: function (url) { return check(url); },
    config: function (option) { return config(option); }
};
//# sourceMappingURL=main.js.map